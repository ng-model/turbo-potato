{"version":3,"sources":["pages/Contact.js","pages/Table.js","pages/Home.js","pages/Users.js","pages/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Contact","className","type","name","value","Component","TableHeader","TableBody","props","rows","characterData","map","row","index","key","job","Table","this","Home","heading","Users","users","details","console","log","listOfUsers","user","_id","toString","company","balance","age","phone","address","eyeColor","email","gender","moment","format","friends","length","about","id","Nav","wishMsg","x","Date","getHours","App","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iNAqBeA,E,uKAjBX,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,eAAf,WACA,yBAAKA,UAAU,aACb,8BACE,uCAEE,2BAAOC,KAAK,OAAOC,KAAK,UAE1B,2BAAOD,KAAK,SAASE,MAAM,kB,GAXjBC,aCChBC,EAAc,WAClB,OACE,+BACE,4BACE,oCACA,sCAMFC,EAAY,SAACC,GACjB,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACzC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAIT,MACT,4BAAKS,EAAIG,SAKf,OAAO,+BAAQN,IAkBFO,E,uKAdH,IACAN,EAAkBO,KAAKT,MAAvBE,cACR,OACE,6BACE,2BAAOT,UAAU,qBACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWS,cAAeA,KAE5B,kBAAC,EAAD,W,GATYL,aCMLa,E,uKA5BX,IAAMC,EAAU,oCAmBhB,OACE,6BACE,4BAAQlB,UAAU,eAAekB,GACjC,kBAAC,EAAD,CAAOT,cArBQ,CACjB,CACEP,KAAM,UACNY,IAAK,WAEP,CACEZ,KAAM,MACNY,IAAK,WAEP,CACEZ,KAAM,MACNY,IAAK,mBAEP,CACEZ,KAAM,SACNY,IAAK,qB,GAlBMV,a,gBCuCJe,MAvCf,SAAeZ,GACb,IAAIa,EAAQb,EAAMc,QAClBC,QAAQC,IAAIH,GACZ,IAAII,EAAcJ,EAAMV,KAAI,SAACe,GAAD,OAC1B,yBAAKzB,UAAU,WAAWa,IAAKY,EAAKC,IAAIC,YACtC,yBAAK3B,UAAU,8CACb,2BAAIyB,EAAKG,SADX,IACwB,2BAAIH,EAAKI,UAEjC,yBAAK7B,UAAU,aACb,yBAAKA,UAAU,IACb,oCAAUyB,EAAKvB,MADjB,IAC2B,mCAASuB,EAAKK,KACvC,uCAAaL,EAAKM,OAClB,mCAASN,EAAKO,SACd,yCAAeP,EAAKQ,UACpB,qCAAWR,EAAKS,OAChB,mCAAST,EAAKU,QACd,yCAAeC,MAASC,OAAO,OAC/B,4CAAkBZ,EAAKa,QAAQC,QAC/B,oCAEE,6BAFF,IAEUd,EAAKe,QAGjB,yBAAKxC,UAAU,kCACb,2BACEC,KAAK,WACLwC,GAAIhB,EAAKC,IACT1B,UAAU,yBAEZ,2BAAOA,UAAU,wBAAjB,oCAOR,OAAO,6BAAMwB,ICAAkB,E,uKAnCX,IAEIC,EADEC,GADO,IAAIC,MACFC,WAEf,OAAQF,GACN,KAAKA,EAAI,GACPD,EAAU,UACV,MACF,KAAKC,GAAK,IAAMA,EAAI,GAClBD,EAAU,YACV,MACF,QACEA,EAAU,QAGd,OACE,6BACE,yBAAK3C,UAAU,gCACb,4BAAQA,UAAU,gCAAlB,UAGA,4BAAQA,UAAU,yBAAlB,QAGA,4BAAQA,UAAU,yBAAlB,QAGA,4BAAQA,UAAU,kCAAlB,QACQ2C,EADR,e,GA5BQvC,a,OCkBH2C,E,uKAZX,OACE,yBAAK/C,UAAU,mBACb,kBAAC,EAAD,MACA,8BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOqB,QAAS2B,U,GAPR5C,aCME6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.32eef347.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Contact extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">Contact</div>\r\n        <div className=\"card-body\">\r\n          <form>\r\n            <label>\r\n              Name:\r\n              <input type=\"text\" name=\"name\" />\r\n            </label>\r\n            <input type=\"submit\" value=\"Submit\" />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\r\nimport Contact from \"./Contact\";\r\n\r\nconst TableHeader = () => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Job</th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nconst TableBody = (props) => {\r\n  const rows = props.characterData.map((row, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td>{row.name}</td>\r\n        <td>{row.job}</td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return <tbody>{rows}</tbody>;\r\n};\r\n\r\nclass Table extends Component {\r\n  render() {\r\n    const { characterData } = this.props;\r\n    return (\r\n      <div>\r\n        <table className=\"table table-hover\">\r\n          <TableHeader />\r\n          <TableBody characterData={characterData} />\r\n        </table>\r\n        <Contact />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport Table from \"./Table\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    const heading = <h1>Home</h1>;\r\n    const characters = [\r\n      {\r\n        name: \"Charlie\",\r\n        job: \"Janitor\",\r\n      },\r\n      {\r\n        name: \"Mac\",\r\n        job: \"Bouncer\",\r\n      },\r\n      {\r\n        name: \"Dee\",\r\n        job: \"Aspring actress\",\r\n      },\r\n      {\r\n        name: \"Dennis\",\r\n        job: \"Bartender\",\r\n      },\r\n    ];\r\n    return (\r\n      <div>\r\n        <header className=\"text-center\">{heading}</header>\r\n        <Table characterData={characters} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nfunction Users(props) {\r\n  let users = props.details;\r\n  console.log(users);\r\n  let listOfUsers = users.map((user) => (\r\n    <div className=\"card m-2\" key={user._id.toString()}>\r\n      <div className=\"card-header d-flex justify-content-between\">\r\n        <p>{user.company}</p> <p>{user.balance}</p>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <div className=\"\">\r\n          <p>Name: {user.name}</p> <p>Age: {user.age}</p>\r\n          <p>Contact: {user.phone}</p>\r\n          <p>Age: {user.address}</p>\r\n          <p>Eye Color: {user.eyeColor}</p>\r\n          <p>Em@il: {user.email}</p>\r\n          <p>Sex: {user.gender}</p>\r\n          <p>Registerd: {moment().format(\"LL\")}</p>\r\n          <p>Company Size: {user.friends.length}</p>\r\n          <p>\r\n            About:\r\n            <br /> {user.about}\r\n          </p>\r\n        </div>\r\n        <div className=\"custom-control custom-checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id={user._id}\r\n            className=\"custom-control-input\"\r\n          />\r\n          <label className=\"custom-control-label\">\r\n            Check this custom checkbox\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ));\r\n  return <div>{listOfUsers}</div>;\r\n}\r\n\r\nexport default Users;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Nav extends Component {\r\n  render() {\r\n    const date = new Date();\r\n    const x = date.getHours();\r\n    let wishMsg;\r\n    switch (x) {\r\n      case x < 12:\r\n        wishMsg = \"morning\";\r\n        break;\r\n      case x >= 12 && x < 17:\r\n        wishMsg = \"afternoon\";\r\n        break;\r\n      default:\r\n        wishMsg = \"night\";\r\n        break;\r\n    }\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar justify-content-start\">\r\n          <button className=\"btn btn-link nav-link active\">\r\n            Active\r\n          </button>\r\n          <button className=\"btn btn-link nav-link\">\r\n            Link\r\n          </button>\r\n          <button className=\"btn btn-link nav-link\">\r\n            Link\r\n          </button>\r\n          <button className=\"btn btn-link nav-link disabled\">\r\n            Good {wishMsg} user\r\n          </button>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from \"react\";\r\nimport Home from \"./pages/Home\";\r\nimport Users from \"./pages/Users\";\r\nimport Nav from \"./pages/Nav\";\r\nimport data from \"./pages/userdetails\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <Nav />\r\n        <main>\r\n          <Home />\r\n          <Users details={data} />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}