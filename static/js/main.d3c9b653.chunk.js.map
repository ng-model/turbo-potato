{"version":3,"sources":["pages/Counter.js","pages/Table.js","pages/Home.js","pages/Users.js","pages/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Counter","state","count","countPlus","bind","countMinus","this","setState","prevState","alert","className","onClick","Component","TableHeader","TableBody","props","rows","characterData","map","row","index","key","name","job","Table","Home","Users","listOfUsers","details","user","_id","toString","company","balance","age","phone","address","eyeColor","email","gender","moment","format","friends","length","about","type","favoriteFruit","Nav","wishMsg","x","Date","getHours","App","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAqDeA,E,kDAlDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,GAET,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBANN,E,wDASZE,KAAKC,UAAS,SAACC,GACb,MAAO,CACLN,MAAOM,EAAUN,MAAQ,Q,mCAMJ,IAArBI,KAAKL,MAAMC,MACbO,MAAM,oBAENH,KAAKC,UAAS,SAACC,GACb,MAAO,CACLN,MAAOM,EAAUN,MAAQ,Q,+BAM/B,OACE,yBAAKQ,UAAU,aACb,yBAAKA,UAAU,qCACb,4BACEA,UAAU,iCACVC,QAASL,KAAKH,WAFhB,KAMA,wBAAIO,UAAU,IAAIJ,KAAKL,MAAMC,OAC7B,4BACEQ,UAAU,gCACVC,QAASL,KAAKD,YAFhB,W,GAvCYO,aCChBC,EAAc,WAClB,OACE,+BACE,4BACE,oCACA,sCAMFC,EAAY,SAACC,GACjB,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACzC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,SAKf,OAAO,+BAAQP,IAkBFQ,E,uKAdH,IACAP,EAAkBX,KAAKS,MAAvBE,cACR,OACE,6BACE,2BAAOP,UAAU,qBACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWO,cAAeA,KAE5B,kBAAC,EAAD,W,GATYL,aCMLa,E,uKATX,OACE,6BAEE,kBAAC,EAAD,CAAOR,cArBQ,CACjB,CACEK,KAAM,UACNC,IAAK,WAEP,CACED,KAAM,MACNC,IAAK,WAEP,CACED,KAAM,MACNC,IAAK,mBAEP,CACED,KAAM,SACNC,IAAK,qB,GAlBMX,a,gBCoCJc,MApCf,SAAeX,GACb,IACIY,EADQZ,EAAMa,QACMV,KAAI,SAACW,GAAD,OAC1B,yBAAKnB,UAAU,WAAWW,IAAKQ,EAAKC,IAAIC,YACtC,yBAAKrB,UAAU,8CACb,2BAAImB,EAAKG,SADX,IACwB,2BAAIH,EAAKI,UAEjC,yBAAKvB,UAAU,aACb,yBAAKA,UAAU,IACb,oCAAUmB,EAAKP,MADjB,IAC2B,mCAASO,EAAKK,KACvC,uCAAaL,EAAKM,OAClB,mCAASN,EAAKO,SACd,yCAAeP,EAAKQ,UACpB,qCAAWR,EAAKS,OAChB,mCAAST,EAAKU,QACd,yCAAeC,MAASC,OAAO,OAC/B,4CAAkBZ,EAAKa,QAAQC,QAC/B,oCAEE,6BAFF,IAEUd,EAAKe,QAGjB,yBAAKlC,UAAU,kCACb,2BACEmC,KAAK,WAELnC,UAAU,yBAEZ,2BAAOA,UAAU,wBAAwBmB,EAAKiB,qBAKtD,OAAO,6BAAMnB,ICDAoB,E,uKA/BX,IAEIC,EADEC,GADO,IAAIC,MACFC,WASf,OANGH,EADEC,EAAI,GACI,UACDA,GAAK,IAAMA,EAAI,GACd,YAEA,QAGX,6BACE,yBAAKvC,UAAU,gCACb,4BAAQA,UAAU,gCAAlB,UAGA,4BAAQA,UAAU,yBAAlB,QAGA,4BAAQA,UAAU,yBAAlB,QAGA,4BAAQA,UAAU,kCAAlB,QACQsC,EADR,e,GAxBQpC,a,OCgBHwC,E,uKAVX,OACE,yBAAK1C,UAAU,mBACb,kBAAC,EAAD,MACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOkB,QAASyB,S,GANRzC,aCME0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d3c9b653.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0,\r\n    };\r\n    this.countPlus = this.countPlus.bind(this);\r\n    this.countMinus = this.countMinus.bind(this);\r\n  }\r\n  countPlus() {\r\n    this.setState((prevState) => {\r\n      return {\r\n        count: prevState.count + 1,\r\n      };\r\n    });\r\n  }\r\n\r\n  countMinus() {\r\n    if (this.state.count === 0) {\r\n      alert(\"Can't go below 0\");\r\n    } else {\r\n      this.setState((prevState) => {\r\n        return {\r\n          count: prevState.count - 1,\r\n        };\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"card-body\">\r\n        <div className=\"d-flex justify-content-around m-5\">\r\n          <button\r\n            className=\"btn btn-success rounded-circle\"\r\n            onClick={this.countPlus}\r\n          >\r\n            +\r\n          </button>\r\n          <h4 className=\"\">{this.state.count}</h4>\r\n          <button\r\n            className=\"btn btn-danger rounded-circle\"\r\n            onClick={this.countMinus}\r\n          >\r\n            -\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./Counter\";\r\n\r\nconst TableHeader = () => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Job</th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nconst TableBody = (props) => {\r\n  const rows = props.characterData.map((row, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td>{row.name}</td>\r\n        <td>{row.job}</td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return <tbody>{rows}</tbody>;\r\n};\r\n\r\nclass Table extends Component {\r\n  render() {\r\n    const { characterData } = this.props;\r\n    return (\r\n      <div>\r\n        <table className=\"table table-hover\">\r\n          <TableHeader />\r\n          <TableBody characterData={characterData} />\r\n        </table>\r\n        <Counter />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport Table from \"./Table\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    // const heading = <h1>Home</h1>;\r\n    const characters = [\r\n      {\r\n        name: \"Charlie\",\r\n        job: \"Janitor\",\r\n      },\r\n      {\r\n        name: \"Mac\",\r\n        job: \"Bouncer\",\r\n      },\r\n      {\r\n        name: \"Dee\",\r\n        job: \"Aspring actress\",\r\n      },\r\n      {\r\n        name: \"Dennis\",\r\n        job: \"Bartender\",\r\n      },\r\n    ];\r\n    return (\r\n      <div>\r\n        {/* <header className=\"text-center\">{heading}</header> */}\r\n        <Table characterData={characters} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nfunction Users(props) {\r\n  let users = props.details;\r\n  let listOfUsers = users.map((user) => (\r\n    <div className=\"card m-2\" key={user._id.toString()}>\r\n      <div className=\"card-header d-flex justify-content-between\">\r\n        <p>{user.company}</p> <p>{user.balance}</p>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <div className=\"\">\r\n          <p>Name: {user.name}</p> <p>Age: {user.age}</p>\r\n          <p>Contact: {user.phone}</p>\r\n          <p>Age: {user.address}</p>\r\n          <p>Eye Color: {user.eyeColor}</p>\r\n          <p>Em@il: {user.email}</p>\r\n          <p>Sex: {user.gender}</p>\r\n          <p>Registerd: {moment().format(\"LL\")}</p>\r\n          <p>Company Size: {user.friends.length}</p>\r\n          <p>\r\n            About:\r\n            <br /> {user.about}\r\n          </p>\r\n        </div>\r\n        <div className=\"custom-control custom-checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            // id={user._id}\r\n            className=\"custom-control-input\"\r\n          />\r\n          <label className=\"custom-control-label\">{user.favoriteFruit}</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ));\r\n  return <div>{listOfUsers}</div>;\r\n}\r\n\r\nexport default Users;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Nav extends Component {\r\n  render() {\r\n    const date = new Date();\r\n    const x = date.getHours();\r\n    let wishMsg;\r\n     if (x < 12) {\r\n       wishMsg = \"morning\";\r\n     } else if (x >= 12 && x < 17) {\r\n       wishMsg = \"afternoon\";\r\n     } else {\r\n       wishMsg = \"night\";\r\n     }\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar justify-content-start\">\r\n          <button className=\"btn btn-link nav-link active\">\r\n            Active\r\n          </button>\r\n          <button className=\"btn btn-link nav-link\">\r\n            Link\r\n          </button>\r\n          <button className=\"btn btn-link nav-link\">\r\n            Link\r\n          </button>\r\n          <button className=\"btn btn-link nav-link disabled\">\r\n            Good {wishMsg} user\r\n          </button>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from \"react\";\r\nimport Home from \"./pages/Home\";\r\nimport Users from \"./pages/Users\";\r\nimport Nav from \"./pages/Nav\";\r\nimport data from \"./pages/userdetails\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <Nav />\r\n          <Home />\r\n          <Users details={data} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}